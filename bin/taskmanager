#!/usr/bin/env node

'use strict';

/**
 * taskmanager cli
 *
 * @author 老雷<leizongmin@gmail.com>
 */

var path = require('path');
var fs = require('fs');
var child_process = require('child_process');
var logger = require('../lib/logger');
var utils = require('../lib/utils');


var args = {
  path:     '.',      // 运行目录
  service:  false,    // 以后台服务形式运行
  logger:   'info'    // 日志输出等级
};

(function () {
  var help = '\n\
Node.js taskmanager command line tool.\n\
\n\
Usage:\n\
\n\
        taskmanager [option]\n\
\n\
The options are:\n\
\n\
    -path [path]        set the working directory\n\
    -service            run as a background service\n\
    -logger [level]     set log output level\n\
    -passwd [password]  encrypt password string and print\n\
    -stop               stop the taskmanager process\n\
    -init               initialize a taskmanager project\n\
\n\
Example:\n\
\n\
    taskmanager -path /app/test -logger warn -service\n\
\n\
For more information, please vist https://github.com/quickweb/taskmanager\n\
  ';
  var opts = process.argv.slice(2);
  for (var i = 0; i < opts.length; i++) {
    if (opts[i][0] !== '-')
      continue;
    var k = opts[i].substr(1).toLowerCase();
    var j = i + 1;
    var v = opts[j] && opts[j];

    switch (k) {

      case 'service':
      case 's':
        args.service = true;
        break;

      case 'path':
      case 'p':
        args.path = path.resolve(v || args.path);
        process.chdir(args.path);
        break;

      case 'logger':
      case 'l':
        args.logger = v || args.logger;
        break;

      case 'help':
      case 'h':
        console.log(help);
        process.exit();
        break;

      case 'passwd':
        (function () {
          var utils = require('../lib/utils');
          console.log('================================================');
          console.log('|    ' + utils.encryptPassword(v) + '    |');
          console.log('================================================');
          process.exit();
        })();
        break;

      case 'stop':
        (function () {
          var pid = fs.readFileSync('taskmanager.pid', 'utf8');
          pid = parseInt(pid);
          process.kill(pid);
          console.log('Killed pid ' + pid);
          process.exit();
        })();
        break;

      case 'init':
        require('./init');
        break;
    }
  }
  var lines = [];
  for (var i in args) {
    lines.push(i + '=' + args[i]);
  }
  console.log(lines.join(', '));
})();

// 工作目录
process.chdir(args.path);

// 日志输出等级
(function () {
  var level = {
    error:    1,
    warn:     2,
    info:     3,
    log:      4,
    debug:    5
  };
  var n = level[args.logger];
  if (!n) {
    n = level.info;
  }
  for (var i in logger) {
    if (typeof logger[i] === 'function' && i in level) {
      var n2 = level[i];
      if (n2 > n) {
        logger[i] = function () {};
      }
    }
  }
})();


// 安全验证
(function () {
  var warnFirstLine = true;
  var warn = function (msg) {
    if (warnFirstLine) {
      console.log('=========================================================');
      warnFirstLine = false;
    }
    console.log('\x1B[33m' + msg + '\x1B[39m');
  };
  var die = function () {
    process.exit();
  };
  // 检查当前目录下是否有taskmanager.json配置文件
  try {
    var config = require(path.resolve('./config'));
  } catch (err) {
    warn('Cannot find config file! Please run the following command to initialize a taskmanager project:')
    warn('');
    warn('    taskmanager -init');
    die();
  }
  // 检查是否已设置了密码
  if (typeof config.password !== 'string') {
    warn('Miss the manage password! Please run the following command to encrypt password string and set up the config file.')
    warn('');
    warn('    taskmanager -passwd <Your password>');
    die();
  }
  // 检查弱口令
  var weakPwds = [
    config.admin,
    'admin', 'password', 'pwd',
    'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg',
    '123', '1234', '12345', '123456', '1234567', '12345678'
  ];
  weakPwds.forEach(function (pwd) {
    if (utils.validatePassword(pwd, config.password)) {
      warn('Your password is "' + pwd + '", it\'s too simple!');
      die();
    }
  });
})();


// 启动服务器
(function () {
  if (args.service) {
    if (parseFloat(process.version.substr(1)) < 0.8) {
      console.log('Your Node.js version is less than v0.8, not support run as a background service.');
      process.exit();
    }
    var as = [__filename, '-path', args.path, '-logger', args.logger];
    var out = fs.createWriteStream('taskmanager.log');
    out.on('open', function () {
      var c = child_process.spawn(process.execPath, as, {
        detached:   true,
        stdio:      ['ignore', out, out]
      });
      console.log('Running as a background service.');
      console.log('PID:' + c.pid);
      process.exit();
    });
  } else {
    require('../lib/server');
  }
})();

// 记录进程PID
(function () {
  try {
    fs.writeFile('taskmanager.pid', '' + process.pid, function (err) {
      if (err) {
        console.error(err.stack);
      }
    });
  } catch (err) {
    console.error(err.stack);
  }
})();
