#!/usr/bin/env node


/**
 * taskmanager cli
 *
 * @author 老雷<leizongmin@gmail.com>
 */

var path = require('path');
var fs = require('fs');
var child_process = require('child_process');
var logger = require('../lib/logger');
var utils = require('../lib/utils');
if (process.platform === 'win32')
  var processStat = require('./lib/process_stat_win');
else
  var processStat = require('./lib/process_stat_linux');


var warn = function (msg) {
  console.log('\x1B[33m' + msg + '\x1B[39m');
};
var info = function (msg) {
  console.log('\x1B[36m' + msg + '\x1B[39m');
};

var isNodeVersionTooLow = function () {
  var s = process.version.split('.');
  return (s[0].substr(1) < 0 && s[1] < 8);
};


var args = {
  path:     '.',      // 运行目录
  service:  false,    // 以后台服务形式运行
  logger:   'info'    // 日志输出等级
};

(function () {
  var help = '\n\
Node.js taskmanager command line tool.\n\
\n\
Usage:\n\
\n\
        taskmanager [option]\n\
\n\
The options are:\n\
\n\
    -path <path>        Set the working directory\n\
    -service            Run as a background service\n\
    -logger <level>     Set log output level\n\
    -passwd <password>  Encrypt password string and print\n\
    -stop               Stop the taskmanager process\n\
    -init               Initialize a taskmanager project\n\
    -help               Show this help information\n\
    -version            Show the taskmanager version\n\
\n\
Example:\n\
\n\
    taskmanager -path /app/test -logger warn -service\n\
\n\
For more information, please vist \x1B[36mhttps://github.com/quickweb/taskmanager\x1B[39m\n\
  ';
  var opts = process.argv.slice(2);
  for (var i = 0; i < opts.length; i++) {
    if (opts[i][0] !== '-')
      continue;
    var k = opts[i].substr(1).toLowerCase();
    var j = i + 1;
    var v = opts[j] && opts[j];

    switch (k) {

      case 'service':
      case 's':
        args.service = true;
        break;

      case 'path':
      case 'p':
        args.path = path.resolve(v || args.path);
        process.chdir(args.path);
        break;

      case 'logger':
      case 'l':
        args.logger = v || args.logger;
        break;

      case 'help':
      case 'h':
        console.log(help);
        process.exit();
        break;

      case 'version':
      case 'v':
        (function () {
          var package = require('../package.json');
          console.log(package.version);
          process.exit();
        })();
        break;

      case 'passwd':
        (function () {
          var utils = require('../lib/utils');
          console.log('================================================');
          console.log('|    ' + utils.encryptPassword(v) + '    |');
          console.log('================================================');
          process.exit();
        })();
        break;

      case 'stop':
        (function () {
          try {
            var pid = fs.readFileSync('taskmanager.pid', 'utf8');
            pid = parseInt(pid);
            process.kill(pid);
            info('Killed pid ' + pid);
            fs.unlinkSync('taskmanager.pid');
          } catch (err) {
            warn('Killed pid ' + pid + ' ' + err.stack);
          }
          try {
            var tasks = JSON.parse(fs.readFileSync('processes.json'), 'utf8');
            tasks.forEach(function (t) {
              try {
                process.kill(t.pid);
                info('Killed pid ' + t.pid);
              } catch (err) {
                warn('Killed pid ' + t.pid + ' ' + err.stack);
              }
            });
            fs.unlinkSync('processes.json');
          } catch (err) {
            warn('Killed tasks ' + err.stack);
          }
          process.exit();
        })();
        break;

      case 'init':
        require('./init');
        break;
    }
  }
  var lines = [];
  for (var i in args) {
    lines.push(i + '=' + args[i]);
  }
  console.log(lines.join(', '));
})();


// 工作目录
process.chdir(args.path);


// 日志输出等级
(function () {
  var level = {
    error:    1,
    warn:     2,
    info:     3,
    log:      4,
    debug:    5
  };
  var n = level[args.logger];
  if (!n) {
    n = level.info;
  }
  for (var i in logger) {
    if (typeof logger[i] === 'function' && i in level) {
      var n2 = level[i];
      if (n2 > n) {
        logger[i] = function () {};
      }
    }
  }
})();


// 安全验证
(function () {
  var die = function () {
    process.exit();
  };
  // 检查当前目录下是否有taskmanager.json配置文件
  try {
    var config = require(path.resolve('./config'));
  } catch (err) {
    warn('');
    warn('Cannot find config file! Please run the following command to initialize a taskmanager project:')
    warn('');
    warn('    taskmanager -init');
    die();
  }
  // 检查是否已设置了密码
  if (typeof config.password !== 'string') {
    warn('');
    warn('Miss the manage password! Please run the following command to encrypt password string and set up the config file.')
    warn('');
    warn('    taskmanager -passwd <Your password>');
    die();
  }
  // 检查弱口令
  var weakPwds = [
    config.admin,
    'admin', 'password', 'pwd',
    'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg',
    '123', '1234', '12345', '123456', '1234567', '12345678'
  ];
  weakPwds.forEach(function (pwd) {
    if (utils.validatePassword(pwd, config.password)) {
      warn('');
      warn('Your password is "' + pwd + '", it\'s too simple!');
      die();
    }
  });
})();


var doStart = function () {

  // 启动服务器
  (function () {
    if (args.service) {
      if (isNodeVersionTooLow()) {
        warn('');
        warn('Your Node.js version is less than v0.8, not support run as a background service.');
        process.exit();
      }
      var as = [__filename, '-path', args.path, '-logger', args.logger];
      var out = fs.createWriteStream('taskmanager.log');
      out.on('open', function () {
        var c = child_process.spawn(process.execPath, as, {
          detached:   true,
          stdio:      ['ignore', out, out]
        });
        info('Running as a background service.');
        info('PID:' + c.pid);
        process.exit();
      });
    } else {
      require('../lib/server');
    }
  })();

  // 记录进程PID
  (function () {
    try {
      fs.writeFile('taskmanager.pid', '' + process.pid, function (err) {
        if (err) {
          warn(err.stack);
        }
      });
    } catch (err) {
      warn(err.stack);
    }
  })();
};


// 检查服务器是否正在运行及上次退出时是否有未结束的进程
(function () {
  if (!fs.existsSync('taskmanager.pid')) {
    var tpid = -1;
  } else {
    var tpid = parseInt(fs.readFileSync('taskmanager.pid', 'utf8'), 10);
    if (isNaN(tpid))
      tpid = -1;
  }

  if (!fs.existsSync('processes.json')) {
    var oldps = [];
  } else {
    try {
      var oldps = JSON.parse(fs.readFileSync('processes.json', 'utf8'));
      if (!Array.isArray(oldps))
        oldps = [];
    } catch (err) {
      oldps = [];
    }
  }

  var pids = [];
  if (tpid > 0)
    pids.push(tpid);
  oldps.forEach(function (t) {
    pids.push(t.pid);
  });
  
  if (pids.length < 1)
    return doStart();

  processStat(pids, function (err, tasks) {
    if (err)
      return warn(err.stack);

    if (tpid in tasks) {
      warn('');
      warn('The taskmanager service is already running! PID: ' + tpid);
      process.exit();
    }

    var hasOldProcess = false;
    oldps.forEach(function (t) {
      if (t.pid in tasks) {
        if (hasOldProcess === false) {
          warn('');
          warn('When the taskmanager was stopped, the following tasks were not exit :');
        }
        hasOldProcess = true;
        warn('--------------------------------------------');
        warn('PID:  ' + t.pid);
        warn('Name: ' + t.name)
        warn('Main: ' + t.main);
        warn('--------------------------------------------');
      }
    });
    if (hasOldProcess) {
      warn('');
      warn('Please run this command to stop all these tasks first:');
      warn('    taskmanager -stop');
      process.exit();
    }

    doStart();
  });
})();
